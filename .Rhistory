# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_hour <- 60
hours_in_day <- 24
minutes_in_a_day <- minutes_in_hour * hours_in_day
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_day <- 24
days_in_year <- 365
hours_in_years <- hours_in_day * days_in_year
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_day > hours_in_years
# Create a numeric variable `my_age` that is equal to your age
my_age <- 18
# Create a variable `my_name` that is equal to your first name
my_name <- "Kaushal"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_hour <- 60
hours_in_day <- 24
minutes_in_a_day <- minutes_in_hour * hours_in_day
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_day <- 24
days_in_year <- 365
hours_in_years <- hours_in_day * days_in_year
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_years
make_introduction <- function(name, age){
introduction <- paste("Hello, my name is ",name," and I'm ", age, " years old.")
introduction
}
my_intro <- make_introduction(my_name, my_age)
my_intro
casual_intro <- str_replace(my_intro, "Hello, my name is ", "Hey, I'm ")
library(stringr)
casual_intro <- str_replace(my_intro, "Hello, my name is ", "Hey, I'm ")
casual_intro
loud_intro <- str_to_upper(my_intro)
quiet_intro <- str_to_lower(my_intro)
capitalized_intro <- str_to_title(my_intro)
occurrences <- str_count(my_intro, "e")
double <- function(value){
result <- value*2
result
}
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
occurrences
minutes_in_two_days <- double(minutes_in_a_day)
minutes_in_two_days
cube <- function(value){
result <- value*value*value
result
}
twenty_seven <- cube(3)
twenty_seven
inches_to_cm <- function(value){
cm <- 2.5 * value
cm
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 68.4
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <-  inches_to_cm(inches_tall)
cm_tall
has_more_zs <- function(s1, s2){
n_s1 <- str_to_upper(s1)
n_s2 <- str_to_upper(s2)
if (str_count(n_s1,"z") == 0){
count <- "Neither string contains the letter z"
} else if (str_count(n_s1,"z") > str_count(n_s2,"z")) {
count <- s1
} else if (str_count(n_s1,"z") < str_count(n_s2,"z")){
count <- s2
} else {
count <- "The strings have the same number of Zs"
}
count
}
more_zs <- has_more_zs("hoodie", "watermelon")
more_zs
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zebra", "watermelon")
more_zs
has_more_zs <- function(s1, s2){
n_s1 <- str_to_upper(s1)
n_s2 <- str_to_upper(s2)
if (str_count(n_s1,"Z") == 0){
count <- "Neither string contains the letter z"
} else if (str_count(n_s1,"Z") > str_count(n_s2,"Z")) {
count <- s1
} else if (str_count(n_s1,"Z") < str_count(n_s2,"Z")){
count <- s2
} else {
count <- "The strings have the same number of Zs"
}
count
}
more_zs <- has_more_zs("Zebra", "watermelon")
more_zs
more_zs <- has_more_zs("zebra", "watermelon")
more_zs
movies <- c("Speed","Glass","Unbreakable","Joker","It","Space Jam")
top_three <- movies[1:3]
top_three
excited <- paste(movies,"is a great movie!", sep = " ")
excited
without_four <- movies[-4]
without_four
multiples_of_4. <- seq(4,400,4)
multiples_of_4.
multiples_of_4 <- seq(4,400,4)
multiples_of_8. <- multiples_of_4[seq(2,100,2)]
multiples_of_8.
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4[seq(2,100,2)]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
numbers_len
numbers_mean <- mean(numbers)
numbers_mean
numbers_median <- median(numbers)
numbers_median
summary_info <- list(
length = numbers_len
mean   = numbers_mean
median = numbers_median
)
summary_info <- list(
length = numbers_len,
mean   = numbers_mean,
median = numbers_median,
)
summary_info <- list(
length = numbers_len,
mean   = numbers_mean,
median = numbers_median
)
summarize_vector <-  function(data){
list_data <- list(
length = length(data),
mean = mean(data),
median = median(data)
)
list_data
}
summary_1_to_100 <- summarize_vector(seq(1,100))
lower_numbers <- 700:mean(numbers)
lower_numbers
higher_numbers <- mean(numbers):999
higher_numbers
casual_intro <- str_replace(my_intro, "Hello, my name is ", "Hey, I'm ")
casual_intro
?gsub
test_vec <- c("INFO 201", "CSE 142", "INFO 200")
remove_digits(test_vec)
remove_digits <- function(vec){
return(gsub('[0-9]+', '', vec))
}
test_vec <- c("INFO 201", "CSE 142", "INFO 200")
remove_digits(test_vec)
higher_numbers <- mean(numbers) + 0.5:999
higher_numbers
higher_numbers <- numbers_mean:999
higher_numbers
higher_numbers <- numbers_mean:999 + 0.5
higher_numbers
courses
courses
courses <- data.frame(
number = c(
'INFO 102', 'INFO 200', 'INFO 201', 'INFO 300'
),
topic = c(
'Gender and IT', 'Intellectual Foundations',
'Technical Foundations', 'Research Methods'
)
)
courses
our_class <- courses[courses$number == 'INFO 201',]
our_class <- courses[courses$number == 'INFO 201',]
our''
our_class
our_class <- courses[courses$number == 'INFO 201']
our_class <- courses[courses$number == 'INFO 201',]
our_class
our_class <- courses[courses$number == 'INFO 201','INFO 200',]
our_class
our_class <- courses[courses$number == 'INFO 201' && courses$number == 'INFO 200',]
our_class
our_class <- courses[courses$number == 'INFO 201' &
courses$number == 'INFO 200',]
our_class
higher_numbers <- numbers_mean:999
higher_numbers
higher_numbers <- numbers_mean:999 +0.5
higher_numbers
higher_numbers <- numbers_mean:999
higher_numbers
numbers_mean
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers_mean:999 +  0.5
higher_numbers
Titanic_df
# Create a vector `spanish_grades` that holds 1000 random values in it
# (these represent grades in a spanish course)
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
spanish_grades <- c(rnorm(1000, mean = 85, sd = 12))
Titanic_df
titanic_df
library(Titanic)
is.data.frame(Titanic)
titanic_df <- as.data.frame(Titanic, stringAsFactors = FALSE)
titanic_df
num_children <- sum(children$Freq)
num_children <- sum(children["Freq"])
children <- titanic_df[titanic_df[["Age"]] == "Child",]
children
titanic_df["Sex"]
children["Class"]
children["Freq"]
sum(children["Freq"])
num_children
num_children
sum(children["Freq"])
num_children <- sum(children["Freq"])
num_children
install.packages("shiny")
library("shiny")
# example01.R
#-----------------------------------------------------------------------------
# Demonstrates using dylpr to join data frames
#-----------------------------------------------------------------------------
library("dplyr")
#-----------------------------------------------------------------------------
# Data Wrangle: Read data file and select two columns and rename them to
#   state_code
#   state_division_id
# And revmove all duplicates
# This function reduces about 3,500 rows to 50 rows (one for each state)
#-----------------------------------------------------------------------------
create_state_census_division_df <- function() {
# Read the file
df_t <- read.csv("./data/natural-amenity-simplified.csv",
header = TRUE,
stringsAsFactors = FALSE
)
# Data wrangling
df <- df_t %>%
select(    state_code = "STATE",
census_division_id = "Census.Division") %>%
distinct()
# Check if things seem to be correct
if (nrow(df) != 50 ) {
stop("Should be 50 rows - one for each state")
}
# View(df_t)
# View(df)
# Write the file
write.csv(df,"./data/state_census_division.csv", row.names=FALSE)
return(df)
}
#-----------------------------------------------------------------------------
# Creates a data frame that maps census_division_id a human readable name
# data frame
#    census_division_id  integer  [1 .. 9]
#    division_name       character
#
# Question: Are there 50 rows in this data frame? Why or why not?
#-----------------------------------------------------------------------------
create_state_census_division_name_df <- function() {
df <- read.csv(textConnection("
census_division_id,division_name
1,New England
2,Middle Atlantic
3,East  North Central
4,West North Central
5,South Atlantic
6,East South Central
7,West South Central
8,Mountain
9,Pacific
"),
stringsAsFactors = FALSE)
return (df)
}
#-----------------------------------------------------------------------------
# Creates a data frame of state name, abbriviation, and code
# data frame
#    state_name     character
#    state_abbrev   character
#    state_code     character   [Length: 2]
#-----------------------------------------------------------------------------
create_state_name_info_df <- function() {
df <- read.csv(textConnection("
state_name,state_abbrev,state_code
Alabama,Ala.,AL
Alaska,Alaska,AK
Arizona,Ariz.,AZ
Arkansas,Ark.,AR
California,Calif.,CA
Colorado,Colo.,CO
Connecticut,Conn.,CT
Delaware,Del.,DE
District of Columbia,D.C.,DC
Florida,Fla.,FL
Georgia,Ga.,GA
Hawaii,Hawaii,HI
Idaho,Idaho,ID
Illinois,Ill.,IL
Indiana,Ind.,IN
Iowa,Iowa,IA
Kansas,Kans.,KS
Kentucky,Ky.,KY
Louisiana,La.,LA
Maine,Maine,ME
Maryland,Md.,MD
Massachusetts,Mass.,MA
Michigan,Mich.,MI
Minnesota,Minn.,MN
Mississippi,Miss.,MS
Missouri,Mo.,MO
Montana,Mont.,MT
Nebraska,Nebr.,NE
Nevada,Nev.,NV
New Hampshire,N.H.,NH
New ersey,N.J.,NJ
New Mexico,N.M.,NM
New York,N.Y.,NY
North Carolina,N.C.,NC
North Dakota,N.D.,ND
Ohio,Ohio,OH
Oklahoma,Okla.,OK
Oregon,Ore.,OR
Pennsylvania,Pa.,PA
Rhode Island,R.I.,RI
South Carolina,S.C.,SC
South Dakota,S.D.,SD
Tennessee,Tenn.,TN
Texas,Tex.,TX
Utah,Utah,UT
Vermont,Vt.,VT
Virginia,Va.,VA
Washington,Wash.,WA
West Virginia,W.Va.,WV
Wisconsin,Wis.,WI
Wyoming,Wyo.,WY
"),
stringsAsFactors = FALSE)
return (df)
}
#-----------------------------------------------------------------------------
# Creates a data frame of state name, abbriviation, and code
# data frame
#    state_code            character   [Length: 2]
#    census_division_id    integer     [1 .. 8]
#
# Note: This data comes from: create_state_census_division_df()
#-----------------------------------------------------------------------------
create_state_code_census_division_df <- function() {
df <- read.csv(textConnection(
"state_code,census_division_id
AL,6
AZ,8
AR,7
CA,9
CO,8
CT,1
DE,5
DC,5
FL,5
GA,5
ID,8
IL,3
IN,3
IA,4
KS,4
KY,6
LA,7
ME,1
MD,5
MA,1
MI,3
MN,4
MS,6
MO,4
MT,8
NE,4
NV,8
NH,1
NJ,2
NM,8
NY,2
NC,5
ND,4
OH,3
OK,7
OR,9
PA,2
RI,1
SC,5
SD,4
TN,6
TX,7
UT,8
VT,1
VA,5
WA,9
WV,5
WI,3
WI,4
WY,8
"),
stringsAsFactors = FALSE)
return(df)
}
#-----------------------------------------------------------------------------
# Task #1: Write a function that returns the following data frame:
#    state_code
#    state_abbrev
#    state_name
#    state_census_id
#    state_census_name
#
# This will require that you combine data from two data frames. Use the dplyr
# join functions.
#
# See: ?join()
#-----------------------------------------------------------------------------
create_state_info_df <- function () {
df <- NULL
state_code <-
return(df)
}
#-----------------------------------------------------------------------------
# Task #2: How many states are in each of the census divisions? Show the IDs and
# the names.
#-----------------------------------------------------------------------------
num_states_by_cenusus_division_df <- function () {
df <- NULL
# your code goes here
return(df)
}
#-----------------------------------------------------------------------------
# Task #3: What is the following expression TRUE?  This this a problem? If so, what
# should be done?
#-----------------------------------------------------------------------------
if (nrow(create_state_census_division_df()) != nrow(create_state_name_info_df())) {
print ("Number of records in state_census_division and state_name_info data frames are different!")
}
#-----------------------------------------------------------------------------
# Main: Test the functions
#-----------------------------------------------------------------------------
df1 <- create_state_info_df()
View(df1)
df2 <- num_states_by_cenusus_division_df()
View(df2)
shiny::runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
shiny::runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
runApp('Desktop/info201-2/project/R-project-group')
shiny::runApp('Desktop/info201-2/project/R-project-group')
setwd("~/Desktop/info201-2/project/R-project-group")
setwd("~/Desktop/info201-2/project/R-project-group")
setwd("~/Desktop/info201-2/project/R-project-group")
runApp()
